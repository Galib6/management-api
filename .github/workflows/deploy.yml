name: Marketearz Strapi Production CI

on:
  push:
    branches: [main]

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate .env
        run: |
          envsubst "`printf '${%s} ' $(sh -c "env|cut -d'=' -f1")`" < ./.env.example > ./.env
        env:
          HOST: 0.0.0.0
          PORT: 1337
          APP_KEYS: ${{ secrets.PROD_APP_KEYS }}
          API_TOKEN_SALT: ${{ secrets.PROD_API_TOKEN_SALT }}
          TRANSFER_TOKEN_SALT: ${{ secrets.PROD_TRANSFER_TOKEN_SALT }}
          ADMIN_JWT_SECRET: ${{ secrets.PROD_ADMIN_JWT_SECRET }}
          JWT_SECRET: ${{ secrets.PROD_JWT_SECRET }}

          DATABASE_CLIENT: postgres
          DATABASE_HOST: ${{ secrets.PROD_DATABASE_HOST }}
          DATABASE_PORT: ${{ secrets.PROD_DATABASE_PORT }}
          DATABASE_NAME: ${{ secrets.PROD_DATABASE_NAME }}
          DATABASE_USERNAME: ${{ secrets.PROD_DATABASE_USERNAME }}
          DATABASE_PASSWORD: ${{ secrets.PROD_DATABASE_PASSWORD }}

          CLOUDINARY_NAME: ${{ secrets.PROD_CLOUDINARY_NAME }}
          CLOUDINARY_KEY: ${{ secrets.PROD_CLOUDINARY_KEY }}
          CLOUDINARY_SECRET: ${{ secrets.PRODCLOUDINARY_SECRET }}

          # DATABASE_SSL: true
          # DATABASE_SSL_REJECT_UNAUTHORIZED: false
          # DATABASE_SSL_CA: db.crt

          # AWS_ENDPOINT: sgp1.digitaloceanspaces.com
          # AWS_ACCESS_KEY_ID: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
          # AWS_ACCESS_SECRET: ${{ secrets.PROD_AWS_ACCESS_SECRET }}
          # AWS_BUCKET: unispaces/marketearz

          SMTP_HOST: ${{ secrets.PROD_SMTP_HOST }}
          SMTP_PORT: ${{ secrets.PROD_SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.PROD_SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.PROD_SMTP_PASSWORD }}

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{secrets.DOCKER_USER}}/management-api:latest

      - name: Docker Push
        run: docker push ${{secrets.DOCKER_USER}}/management-api:latest

  Deploy:
    needs: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Stopping previous build"
            docker stop management-api

            echo "Removing previous build"
            docker rm management-api

            echo "Removing old image from local"
            docker rmi ${{secrets.DOCKER_USER}}/management-api:latest

            echo "Pulling latest image from docker hub"
            docker pull ${{secrets.DOCKER_USER}}/management-api:latest

  Run:
    needs: Deploy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Starting latest build"
            docker run -e NODE_ENV=production -d \
              --restart always --network host \
              -dit --name management-api \
              -p 1337:1337 \
              --name management-api \
              ${{secrets.DOCKER_USER}}/management-api:latest

            echo "Deploy Done"
