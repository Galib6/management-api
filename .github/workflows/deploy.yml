name: Management API Production CLI

on:
  push:
    branches: [main]

jobs:
  Build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Generate .env
        run: |
          echo "HOST=0.0.0.0" > .env
          echo "PORT=1337" >> .env
          echo "APP_KEYS=${{ secrets.PROD_APP_KEYS }}" >> .env
          echo "API_TOKEN_SALT=${{ secrets.PROD_API_TOKEN_SALT }}" >> .env
          echo "TRANSFER_TOKEN_SALT=${{ secrets.PROD_TRANSFER_TOKEN_SALT }}" >> .env
          echo "ADMIN_JWT_SECRET=${{ secrets.PROD_ADMIN_JWT_SECRET }}" >> .env
          echo "JWT_SECRET=${{ secrets.PROD_JWT_SECRET }}" >> .env
          echo "DATABASE_CLIENT=postgres" >> .env
          echo "DATABASE_HOST=${{ secrets.PROD_DATABASE_HOST }}" >> .env
          echo "DATABASE_PORT=${{ secrets.PROD_DATABASE_PORT }}" >> .env
          echo "DATABASE_NAME=${{ secrets.PROD_DATABASE_NAME }}" >> .env
          echo "DATABASE_USERNAME=${{ secrets.PROD_DATABASE_USERNAME }}" >> .env
          echo "DATABASE_PASSWORD=${{ secrets.PROD_DATABASE_PASSWORD }}" >> .env
          echo "CLOUDINARY_NAME=${{ secrets.PROD_CLOUDINARY_NAME }}" >> .env
          echo "CLOUDINARY_KEY=${{ secrets.PROD_CLOUDINARY_KEY }}" >> .env
          echo "CLOUDINARY_SECRET=${{ secrets.PRODCLOUDINARY_SECRET }}" >> .env
          echo "SMTP_HOST=${{ secrets.PROD_SMTP_HOST }}" >> .env
          echo "SMTP_PORT=${{ secrets.PROD_SMTP_PORT }}" >> .env
          echo "SMTP_USERNAME=${{ secrets.PROD_SMTP_USERNAME }}" >> .env
          echo "SMTP_PASSWORD=${{ secrets.PROD_SMTP_PASSWORD }}" >> .env

      - name: Print .env file
        run: cat .env

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag ${{secrets.DOCKER_USER}}/management-api:latest

      - name: Docker Push
        run: docker push ${{secrets.DOCKER_USER}}/management-api:latest

  Deploy:
    needs: Build

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Stopping previous build"
            docker stop management-api

            echo "Removing previous build"
            docker rm management-api

            echo "Removing old image from local"
            docker rmi ${{secrets.DOCKER_USER}}/management-api:latest

            echo "Pulling latest image from docker hub"
            docker pull ${{secrets.DOCKER_USER}}/management-api:latest

  Run:
    needs: Deploy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Logging to docker
        run: docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      - name: Deploy To Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USER }}
          password: ${{ secrets.PROD_PASSWORD }}
          script: |
            echo "Logging to docker hub"
            docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

            echo "Starting latest build"
            docker run -e NODE_ENV=production -d \
              --restart always \
              -dit --name management-api \
              -p 1337:1337 \
              --name management-api \
              ${{secrets.DOCKER_USER}}/management-api:latest

            echo "Deploy Done"
